@model PagedList.IPagedList<UpliftlabUniversity.Models.Student>

@{
    ViewBag.Title = "Index";
}

<h2>Students</h2>

<p>
    <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span>
    @Html.ActionLink("Create New", "Create")
</p>
@using (Html.BeginForm())
{
    <p>
        Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search"/>
    </p>
}
<table class="table table-striped">
    <tr>
        <th>
            @Html.ActionLink("Last Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            First Name
        </th>
        <th>
            @Html.ActionLink("Enrollment Date", "Index", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.LastName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.FirstMidname)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.EnrollmentDate)
        </td>
        <td>
            <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
            @Html.ActionLink("Edit", "Edit", new { id=item.StudentID }) |
                <span class="glyphicon glyphicon-zoom-in" aria-hidden="true"></span>
            @Html.ActionLink("Details", "Details", new { id=item.StudentID }) |
                    <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
            @Html.ActionLink("Delete", "Delete", new { id=item.StudentID })
        </td>
    </tr>
}

</table>
<div>
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    @if (Model.HasPreviousPage)
    {
        @Html.ActionLink("<<", "Index", new { page = 1, sortOrder = ViewBag.CurrentSort, currentfilter = ViewBag.CurrentFilter })
        @Html.Raw(" ");
        @Html.ActionLink("< Prev", "Index", new
   {
       page = Model.PageNumber -1,
       sortOrder = ViewBag.CurrentSort,
       currentFilter = ViewBag.CurrentFilter
   })
    }
    else
    {
        @:<<
        @Html.Raw(" ");
        @:< Prev
    }
    @if (Model.HasNextPage)
    {
        @Html.ActionLink("Next >", "Index", new
   {
       page = Model.PageNumber + 1,
       sortOrder = ViewBag.CurrenSort,
       currentFilter = ViewBag.CurrentFilter
   })
        @Html.Raw(" ");
        @Html.ActionLink(">>", "Index", new
   {
       page = Model.PageCount,
       sortOrder = ViewBag.CurrentSort,
       currentFilter = ViewBag.CurrentFilter
   })
    }
    else
    {
        @:Next >
        @Html.Raw(" ");
        @:>>
    }
</div>